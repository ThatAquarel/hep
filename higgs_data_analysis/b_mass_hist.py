# Histogram Display for Higgs Diphoton Events
#    Bins masses of diphoton Events and
#    displays higgs mass
#    https://github.com/ThatAquarel/hep
#
# Requirements:
#    numpy
#    pandas
#    matplotlib
#
#    LaTeX (optional)
#    https://miktex.org/download
#
# Example:
#    With invariant masses generated by a_inv_mass.py as inv_mass_a.csv,
#    Plot histogram:
#    >>  python b_mass_hist.py -i inv_mass_a.csv
#
#    Plot histogram with LaTeX
#    >>  python b_mass_hist.py --latex -i inv_mass_a.csv
#
# Modifications:
#    2024/11/08    Alex Xia:    Initial Code, Author
#                  Mateo Duque: Max Significance Identification
#

import argparse

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


def main(
    inv_mass_file,
    start_m=100,
    end_m=180,
    bin_width=2,
    sb_fit_ndeg=32,
    b_fit_ndeg=4,
    sig_res=10,
):
    """
    Histogram Display for Higgs Diphoton Events

    :param inv_mass_file:   Directory of calculated invariant mass
                            Generated from a_inv_mass.py

    :param start_m:         Start of mass histogram window (GeV)
    :param end_m:           End of mass histogram window(GeV)
    :param bin_width:       Binning width of mass (GeV)

    :param sb_fit_ndeg:     Polynomial fit degree for signal+background
                            Higher degree than b_fit_ndeg to capture ripples
    :param b_fit_ndeg:      Polynomial fit degree for background
                            Lower degree to achieve a smooth fit
    :param sig_res:         Resample resolution for significance
                            Higgs mass will have a resolution of
                            bin_width/sig_res GeV
    """

    # read invariant masses
    events = pd.read_csv(inv_mass_file, index_col="event")

    # isolate columns that represent masses of
    # diphoton pairs
    pair_cols = [col for col in events.columns if col.startswith("M")]
    inv_mass = events[pair_cols]

    # accumulate all masses from table in a 1D array
    mass = inv_mass.to_numpy().flatten()

    # filter for NaNs, and remove masses that are out
    # of specified range (start_m, end_m)
    mass = mass[~np.isnan(mass)]
    mass = mass[(mass > start_m) & (mass < end_m)]

    # calculate number of bins
    n_bins = (end_m - start_m) // bin_width

    # acquire ranges of the bins
    bin_edges = np.arange(n_bins) * bin_width + start_m

    # bin all masses according to bins
    hist, bin_edges = np.histogram(mass, bins=bin_edges)

    # data points for histogram
    # remove the last bin_edge since it bounds the
    # end of the last bin
    x, y = bin_edges[:-1], hist

    # signal + background polynomial fit of sb_fit_ndeg
    # degree, on data points
    # get the coefficients of the terms, highest exponent
    # first
    sb_coeffs = np.polyfit(x, y, sb_fit_ndeg)

    # background polynomial fit of b_fit_ndeg degree,
    # on data points
    # (polynomial of lesser degree captures background)
    # get the coefficients of the terms, highest exponent
    # first
    b_coeffs = np.polyfit(x, y, b_fit_ndeg)

    # get functions fit_sb(x) and fit_b(x) in order to
    # evaluate these polynomial fits
    fit_sb, fit_b = np.poly1d(sb_coeffs), np.poly1d(b_coeffs)

    # evaluate polynomial fits
    y_sb, y_b = fit_sb(x), fit_b(x)

    # calculate significance
    sig = (y_sb - y_b) / np.sqrt(y_b)

    # fit significance with a polynomial fit
    sig_coeffs = np.polyfit(x, sig, sb_fit_ndeg)
    fit_sig = np.poly1d(sig_coeffs)

    # resample significance using polynomial fit to achieve
    # a greater empirical resolution in determining the mass
    # of the higgs
    x_resample = np.linspace(x.min(), x.max(), len(x) * sig_res)
    sig_resample = fit_sig(x_resample)

    # return the mass where the significance is the largest
    # using the resampled significance
    higgs = x_resample[np.argmax(sig_resample)]

    # plot figure with one column, two rows
    fig, (sb, s) = plt.subplots(2, 1, height_ratios=[2, 1])
    fig.subplots_adjust(hspace=0)
    sb.set_title("Higgs Decay Through Diphoton Channel")

    # signal + background plots
    # plot data points
    sb.scatter(x, y, color="black", label="$Data$")

    # plot signal + background polynomial fit
    sb.plot(
        x, y_sb, color="red", label=f"$Sig+Bkg\\ ({sb_fit_ndeg}\\ deg\\ poly\\ fit)$"
    )

    # plot background polynomial fit
    sb.plot(
        x, y_b, ":", color="red", label=f"$Bkg\\ ({b_fit_ndeg}\\ deg\\ poly\\ fit)$"
    )

    # add line to identify max significance
    m = "m_{\\gamma\\gamma}"
    sb.axvline(x=higgs, color="blue", label=f"$Higgs:\\ {m}={higgs:.2f}\\ GeV$")

    # add y-axis label, remove x-axis label
    sb.set_ylabel(f"$Events\\ /\\ {bin_width}\\ GeV$")
    sb.tick_params(axis="x", which="both", bottom=False, labelbottom=False)

    # signal plot (without background)
    # plot data points
    s.scatter(x, (y - y_b) / np.sqrt(y_b), color="black")

    # plot significance
    s.plot(x, sig, color="red")

    # plot zeroed background
    s.plot(x, (y_b - y_b) / np.sqrt(y_b), ":", color="red")

    # add line to identify max significance
    s.axvline(x=higgs, color="blue")

    # add y-axis label, add x-axis label
    s.set_ylabel(f"$Significance\\ (\\sigma)$")
    s.set_xlabel(f"${m}\\ (GeV)$")

    # add legend, show
    sb.legend(loc="upper right")
    plt.show()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="Higgs Histogram")
    parser.add_argument("-i", "--input", default="inv_mass_a.csv")
    parser.add_argument("-l", "--latex", action="store_true")

    args = parser.parse_args()

    plt.rcParams["text.usetex"] = args.latex
    main(args.input)
